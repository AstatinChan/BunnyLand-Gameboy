.MACRODEF CLOSE_DIALOGUE
	LD A, $04
	LD $mem_display_flag, A

	LD HL, $dialogue_first_line
	LD BC, $12
	CALL =bzero

	LD HL, $dialogue_third_line
	LD BC, $12
	CALL =bzero
.END

Copy_Dialogue_Buffer:
	LD A, $mem_current_focused_attack_ep_cost
	LD HL, $9c43
	CALL =Print_8bit_Thin

	LD A, $mem_display_flag
	BIT 2, A
	JR Z, =Copy_Dialogue_Buffer_Part2
	RES 2, A
	SET 4, A
	LD $mem_display_flag, A
	LD HL, $9cb4
	LD DE, $dialogue_first_line
	LD C, $12
	JP =tilemap_memcpy

Copy_Dialogue_Buffer_Part2:
	BIT 4, A
	RET Z
	RES 4, A
	LD $mem_display_flag, A

	LD HL, $9cf4
	LD DE, $dialogue_third_line
	LD C, $12
	JP =tilemap_memcpy

Init_Menu:
	LD HL, $mem_bunny_attacks

	.MACRODEF SETUP_NEXT_ATTACK_MENU dialogue_buffer choice_routine ; Attack index pointer in (HL)
		PUSH HL

		; Getting Attack list pointer from index
		LD E, (HL)
		LD D, $00
		SLA E
		RL D
		SLA E
		RL D
		SLA E
		RL D

		LD HL, =Attack_List
		LD A, L
		ADD E
		LD L, A
		LD A, H
		ADC D
		LD H, A

		; Printing txt into dialogue buffer
		LD A, (HL+)
		LD B, A
		LD A, (HL+)
		LD C, A

		LD E, L
		LD D, H
		LD HL, $dialogue_buffer
		CALL =Print_str
		LD H, D
		LD L, E

		; Setting up choice routine
		LD A, (HL+)
		LD B, A
		LD A, (HL+)
		LD C, A

		LD D, H
		LD E, L
		LD HL, $choice_routine
		LD A, B
		LD (HL+), A
		LD A, C
		LD (HL), A

		POP HL
		INC HL
	.END

	.SETUP_NEXT_ATTACK_MENU $dialogue_menu_choice1, $dialogue_menu_choice1_routine
	.SETUP_NEXT_ATTACK_MENU $dialogue_menu_choice2, $dialogue_menu_choice2_routine
	.SETUP_NEXT_ATTACK_MENU $dialogue_menu_choice3, $dialogue_menu_choice3_routine
	.SETUP_NEXT_ATTACK_MENU $dialogue_menu_choice4, $dialogue_menu_choice4_routine
	RET

Nothing:
	RET

Exit_Menu:
	LD A, $enum_dungeon_mode
	LD $mem_requested_mode, A

	.CLOSE_DIALOGUE

	RET

Display_dialogue_cursor:
	LD A, $mem_current_mode
	CP $enum_dungeon_menu_mode
	RET NZ

	LD A, $mem_current_focused_attack_ep_cost
	LD B, A
	LD A, $mem_bunny_mana
	CP B
	LD H, $f2
	JR NC, =.Skip_Disable_cursor_setting
	LD H, $f3
	.Skip_Disable_cursor_setting:

	LD A, $mem_menu_cursor_position
	LD BC, $0000
	LD DE, $0000

	CP $00
	JR NZ, =.choice1_false
	LD B, H
	.choice1_false:

	CP $01
	JR NZ, =.choice2_false
	LD C, H
	.choice2_false:

	CP $02
	JR NZ, =.choice3_false
	LD D, H
	.choice3_false:

	CP $03
	JR NZ, =.choice4_false
	LD E, H
	.choice4_false:

	LD A, B
	LD $dialogue_menu_choice1_cursor, A
	LD A, C
	LD $dialogue_menu_choice2_cursor, A
	LD A, D
	LD $dialogue_menu_choice3_cursor, A
	LD A, E
	LD $dialogue_menu_choice4_cursor, A
	RET

Move_dialogue_cursor:
	LD A, $mem_current_mode
	CP $enum_dungeon_menu_mode
	RET NZ

	LD A, $mem_last_button_direction
	LD B, A
	LD A, $mem_button_direction
	CP $00
	RET Z
	CP B
	RET Z

	DEC A
	BIT 1, A
	JR Z, =.Vertical_axis
	LD A, $mem_menu_cursor_position
	XOR $02
	LD $mem_menu_cursor_position, A
	JR =Reload_EP_Cost

	.Vertical_axis:
	LD A, $mem_menu_cursor_position
	XOR $01
	LD $mem_menu_cursor_position, A

Reload_EP_Cost:
	LD A, $mem_menu_cursor_position
	ADD low($mem_bunny_attacks)
	LD L, A
	LD A, high($mem_bunny_attacks)
	ADC $00
	LD H, A

	; Getting Attack list pointer from index
	LD E, (HL)
	LD D, $00
	SLA E
	RL D
	SLA E
	RL D
	SLA E
	RL D

	LD HL, =Attack_List
	LD A, L
	ADD E
	LD L, A
	LD A, H
	ADC D
	LD H, A

	LD A, L
	ADD $04
	LD L, A
	LD A, H
	ADC $00
	LD H, A

	LD A, (HL)
	LD $mem_current_focused_attack_ep_cost, A

	RET

Check_dialogue_action:
	LD A, $mem_current_mode
	CP $enum_dungeon_menu_mode
	JR Z, =.Dungeon_Menu

	CP $enum_dungeon_dialogue_mode
	RET NZ

	.Dialogue_Box:
	LD A, $mem_button_action
	LD B, A
	LD A, $mem_last_button_action
	XOR B
	AND B
	CP $00
	RET Z
	BIT 0, A
	JP NZ, =Exit_Menu
	RET

	.Dungeon_Menu:
	LD A, $mem_button_action
	LD B, A
	LD A, $mem_last_button_action
	XOR B
	AND B
	CP $00
	RET Z
	BIT 3, A
	JP NZ, =Exit_Menu
	BIT 0, A
	RET Z

	LD A, $mem_current_focused_attack_ep_cost
	LD B, A
	LD A, $mem_bunny_mana
	CP B
	RET C
	SUB B
	DAA
	LD $mem_bunny_mana, A

	LD HL, $dialogue_menu_choice1_routine

	LD A, $mem_menu_cursor_position
	SLA A
	ADD L
	LD L, A

	LD A, (HL+)
	LD D, A
	LD A, (HL+)
	LD E, A

	.CALL_DE
	RET

Check_Open_Menu_button:
	LD A, $mem_current_mode
	CP $enum_dungeon_mode
	RET NZ

	LD A, $mem_requested_mode
	CP $enum_dungeon_mode
	RET NZ

	LD A, $mem_bunny_status
	BIT 0, A
	RET NZ

	LD A, $mem_last_button_action
	AND $08
	LD B, A
	LD A, $mem_button_action
	AND $08
	CP B
	RET Z
	BIT 3, A
	RET Z

	CALL =Init_Menu

	LD A, $enum_dungeon_menu_mode
	LD $mem_requested_mode, A
	RET

Open_dialogue_on_dungeon_menu_mode:
	LD A, $mem_current_mode
	CP $enum_dungeon_menu_mode
	RET NZ
	LD A, $mem_requested_mode
	CP $enum_dungeon_menu_mode
	RET NZ

	LD A, $mem_display_flag
	BIT 0, A
	RET NZ
	LD A, $0d
	LD $mem_display_flag, A

	RET
