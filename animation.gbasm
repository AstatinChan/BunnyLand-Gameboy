Display_Animation_List:
	LD HL, $mem_animation_list
	CALL =Display_Animation
	CALL =Display_Animation
	CALL =Display_Animation
	JP =Display_Animation

Display_Animation:
	PUSH HL

	LD A, (HL)
	LD BC, =Animation_Jump_table
	.JUMP_TABLE
	
	POP HL
	LD A, L
	ADD $04
	LD L, A

	RET

Try_Launch_Animation: ; XY in BC, jump_table index in A
	PUSH HL
	PUSH AF

	LD HL, $mem_animation_list
	XOR A
	CP (HL)
	JP Z, =Try_Launch_Animation.Free_slot_Found

	LD A, $04
	ADD L
	LD L, A

	XOR A
	CP (HL)
	JP Z, =Try_Launch_Animation.Free_slot_Found

	LD A, $04
	ADD L
	LD L, A

	XOR A
	CP (HL)
	JP Z, =Try_Launch_Animation.Free_slot_Found

	LD A, $04
	ADD L
	LD L, A

	XOR A
	CP (HL)
	JP NZ, =Try_Launch_Animation.No_Free_slot_found

	Try_Launch_Animation.Free_slot_Found:
	POP AF

	LD (HL+), A
	LD A, B
	LD (HL+), A
	LD A, C
	LD (HL+), A
	XOR A
	LD (HL+), A

	POP HL
	RET

	Try_Launch_Animation.No_Free_slot_found:
	POP AF
	POP HL
	RET

Animation_Jump_table:
	; 00
	RET
	NOP
	NOP
	NOP

	; 01
	JP =Sparkle_Animation
	NOP

Sparkle_Animation:
	INC HL

	LD A, (HL+)
	ADD $80
	LD D, A
	LD A, $mem_viewport_x
	LD B, A
	SUB $82
	CP D
	RET NC
	ADD $0e
	CP D
	RET C
	LD A, D
	SUB $80
	SUB B
	AND $0f
	SWAP A
	LD B, A


	LD A, (HL+)
	ADD $80
	LD D, A
	LD A, $mem_viewport_y
	LD C, A
	SUB $82
	CP D
	RET NC
	ADD $0d
	CP D
	RET C
	LD A, D
	SUB $80
	SUB C
	AND $0f
	SWAP A
	ADD $06
	LD C, A

	LD E, (HL)
	INC E
	LD A, $1f
	AND E
	LD E, A
	XOR A
	CP E
	JP Z, =Sparkle_Animation.End_animation
	LD (HL), E

	.ADD_MOVING_ANIMATION_OFFSET

	PUSH HL
	LD HL, $mem_oam_buffer
	LD A, $mem_oam_buffer_low
	LD L, A
	ADD $08
	LD $mem_oam_buffer_low, A

	LD D, E
	SRA D
	LD A, C
	SUB D
	ADD $0c
	LD (HL+), A
	LD A, B
	LD (HL+), A
	LD A, E
	SRA A
	SRA A
	AND $02
	ADD $60

	LD (HL+), A
	LD A, $00
	LD (HL+), A

	SRA D
	LD A, C
	SUB D
	ADD $08
	LD (HL+), A
	LD A, B
	ADD $08
	LD (HL+), A
	LD A, E
	SRA A
	SRA A
	AND $02
	ADD $60

	LD (HL+), A
	LD A, $00
	LD (HL+), A


	POP HL
	RET

	Sparkle_Animation.End_animation:
	LD A, L
	AND $fc
	LD L, A
	LD (HL), $00
	RET
