Initialize_Bunny:
	LD HL, $mem_entites_list
	LD A, $01
	LD (HL+), A

	LD A, $mem_number_of_rooms
	CALL =RNG_Bound
	SLA A
	SLA A
	ADD $80
	LD C, A

	LD B, $c8

	LD A, (BC)
	LD D, A
	INC BC
	LD A, (BC)
	INC A
	CALL =RNG_Bound
	ADD D

	LD (HL+), A

	INC BC

	LD A, (BC)
	LD D, A
	INC BC
	LD A, (BC)
	INC A
	CALL =RNG_Bound
	ADD D
	LD (HL+), A
	INC HL
	LD BC, =Move_Bunny
	LD A, B
	LD (HL+), A
	LD A, C
	LD (HL+), A
	INC HL
	INC HL
	LD A, $0d
	LD (HL+), A
	LD A, $10
	LD (HL+), A
	LD (HL+), A
	LD A, $03
	LD (HL+), A
	LD BC, =Fox_AI
	LD A, B
	LD (HL+), A
	LD A, C
	LD (HL+), A
	INC HL
	INC HL
	LD A, $0d
	LD (HL+), A
	LD A, $10
	LD (HL+), A
	LD (HL+), A
	LD A, $03
	LD (HL+), A
	LD BC, =Fox_AI
	LD A, B
	LD (HL+), A
	LD A, C
	LD (HL+), A
	INC HL
	INC HL

Fix_Bunny_screen:
	LD A, $mem_bunny_x
	SUB $05
	LD $mem_viewport_x, A

	LD A, $mem_bunny_y
	SUB $04
	LD $mem_viewport_y, A

	LD A, $mem_viewport_x
	SWAP A
	AND $f0
	OR $08
	LD $reg_viewport_x, A

	LD A, $mem_viewport_y
	SWAP A
	AND $f0
	OR $08
	LD $reg_viewport_y, A

	RET

Move_Bunny:
	; IF HL IS EVER USED, IT SHOULD BE PUSHED HERE
	LD C, $00 ; (bit 0 = has_scrolled, bit 1 = has ended movement)
	LD A, $mem_bunny_direction
	BIT 3, A
	JR NZ, =Move_Bunny.check_direction

	LD A, $mem_button_direction
	CP $00
	JP Z, =Move_Bunny.end
	SET 3, A
	LD $mem_bunny_direction, A

	Move_Bunny.check_direction:
		LD A, $mem_bunny_direction

		DEC A
		LD B, $01
		BIT 0, A
		JR NZ, =Move_Bunny.check_direction_end
		LD B, $FF

	Move_Bunny.check_direction_end:

	BIT 1, A
	JR NZ, =Move_Bunny.vertical_move

	Move_Bunny.horizontal_move:
		Move_Bunny.horizontal_move.check_collision:
		LD D, B
		LD A, $mem_bunny_y
		LD B, A
		LD A, $mem_bunny_x

		ADD D

		CALL =Is_Solid

		CP $00
		JR NZ, =Move_Bunny.collision

		LD B, D

	Move_Bunny.horizontal_px_move:
		SET 0, C
		LD A, $reg_viewport_x
		ADD B
		LD $reg_viewport_x, A
		JP =Move_Bunny.check_end_of_movement

	Move_Bunny.vertical_move:
		LD D, B
		LD A, $mem_bunny_y
		ADD D
		LD B, A
		LD A, $mem_bunny_x

		CALL =Is_Solid

		CP $00
		JR NZ, =Move_Bunny.collision

		LD B, D

	Move_Bunny.vertical_px_move:
		SET 0, C
		LD A, $reg_viewport_y
		ADD B
		LD $reg_viewport_y, A
		JP =Move_Bunny.check_end_of_movement

	Move_Bunny.collision:
		LD A, $mem_bunny_direction
		RES 3, A
		LD $mem_bunny_direction, A
		JP =Move_Bunny.end

	Move_Bunny.check_end_of_movement:
		LD A, $mem_moving_animation_step
		INC A
		AND $0f
		LD $mem_moving_animation_step, A
		JR NZ, =Move_Bunny.end
		SET 1, C
		LD A, $mem_bunny_direction
		RES 3, A
		LD $mem_bunny_direction, A
		AND $07
		DEC A

		BIT 1, A
		JR NZ, =Move_Bunny.vertical_tile_move

		Move_Bunny.horizontal_tile_move:
			BIT 0, C
			JR Z, =Move_Bunny.horizontal_tile_move.move_viewport_end
			LD A, $mem_viewport_x
			ADD B
			LD $mem_viewport_x, A
			Move_Bunny.horizontal_tile_move.move_viewport_end:
			LD A, $mem_bunny_x
			ADD B
			LD $mem_bunny_x, A
			JP =Move_Bunny.end

		Move_Bunny.vertical_tile_move:
			BIT 0, C
			JR Z, =Move_Bunny.vertical_tile_move.move_viewport_end
			LD A, $mem_viewport_y
			ADD B
			LD $mem_viewport_y, A
			Move_Bunny.vertical_tile_move.move_viewport_end:
			LD A, $mem_bunny_y
			ADD B
			LD $mem_bunny_y, A

	Move_Bunny.end:
	LD A, C
	LD $mem_map_loading_flags, A
	RET
